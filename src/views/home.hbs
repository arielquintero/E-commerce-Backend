<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <title>Lista de Productos</title>
  <!-- Estilos, con Bulma -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
</head>

<body>
  <section class="section">
    <div class="container">
      <!-- Bot√≥n para seleccionar carrito -->
      <section class="section">
        <div class="container">
          <h4 class="title is-4 has-text-centered">Carritos Disponibles</h4>

          <!-- Selecci√≥n de carrito -->
          <div class="field has-addons has-addons-right">
            <div class="control">
              <div id="selectedCartContainer" class="box has-text-centered">
                <p id="selectedCartText">No hay carrito seleccionado</p>
              </div>
            </div>
          </div>

          <!-- Lista de carritos -->
          <div id="cartList" class="columns is-multiline">
            <!-- Aqu√≠ se insertar√°n los carritos din√°micamente -->
          </div>

          <!-- Contenedor del bot√≥n para crear carritos -->
          <div class="has-text-centered mt-4" id="createCartContainer">
            <!-- Se mostrar√° el bot√≥n solo si hay menos de 3 carritos -->
          </div>

          <!-- Bot√≥n para cargar carritos -->
          <div class="has-text-centered mt-4">
            <button class="button is-primary" id="loadCarts" onclick="loadCarts()">Cargar Carritos</button>
          </div>
        </div>
      </section>
      <h1 class="title is-1 has-text-centered">Lista de Productos</h1>
    </div>
  </section>

  <!-- Formulario de filtros -->
  <form method="GET" action="/">
    <div class="field">
      <label class="label">Categor√≠a</label>
      <div class="control">
        <div class="select">
          <select name="category">
            <option value="">Todos</option>
            {{#each categories}}
            <option value="{{this.name}}" {{#if this.isSelected}}selected{{/if}}>{{this.name}}</option>
            {{/each}}
          </select>
        </div>
      </div>
    </div>

    <div class="field">
      <label class="label">L√≠mite</label>
      <div class="control">
        <input class="input" type="number" name="limit" value="{{limit}}">
      </div>
    </div>

    <div class="field">
      <label class="label">Ordenar por</label>
      <div class="control">
        <div class="select">
          <select name="sort">
            <option value="">Mas relevantes</option>
            <option value="preAsc" {{#if preAsc}}selected{{/if}}>Menor precio</option>
            <option value="preDesc" {{#if preDesc}}selected{{/if}}>Mayor precio</option>
          </select>
        </div>
      </div>
    </div>
    <div class="field">
      <label class="label">Disponiblilidad</label>
      <div class="control">
        <div class="select">
          <select name="status">
            <!-- Si isAvailable es true, se selecciona "Disponible"; de lo contrario, "No Disponible" -->
            <option value="true" {{#if isAvailable}}selected{{/if}}>Disponible</option>
            <option value="false" {{#unless isAvailable}}selected{{/unless}}>No Disponible</option>
          </select>
        </div>
      </div>
    </div>

    <div class="control pt-2 pb-5">
      <button class="button is-primary" type="submit">Filtrar</button>
    </div>
  </form>

  <!-- Listado de productos -->
  <div class="columns is-multiline">
    {{#each products}}
    <div class="column is-one-third">
      <div class="card">
        <div class="card-content">
          <p class="title"><strong>{{this.title}}</strong></p>
          <p><strong>Descripci√≥n:</strong> {{this.description}}</p>
          <p><strong>C√≥digo:</strong> {{this.code}}</p>
          <p><strong>Precio:</strong> ${{this.price}}</p>
          <p><strong>Stock:</strong> {{this.stock}}</p>
          <a class="button is-link" href="/product/{{this._id}}">Ver Detalles</a>
        </div>
      </div>
    </div>
    {{/each}}
  </div>

  <!-- Paginaci√≥n -->
  <nav class="pagination is-centered" role="navigation" aria-label="pagination">
    {{#if pagination.hasPrevPage}}
    <a class="pagination-previous"
      href="/?page={{pagination.prevPage}}&limit={{limit}}&category={{category}}&sort={{sort}}&status={{status}}">Anterior
    </a>
    {{else}}
    <a class="pagination-previous" disabled>Anterior</a>
    {{/if}}

    {{#if pagination.hasNextPage}}
    <a class="pagination-next"
      href="/?page={{pagination.nextPage}}&limit={{limit}}&category={{category}}&sort={{sort}}&status={{status}}">
      Siguiente
    </a>
    {{else}}
    <a class="pagination-next" disabled>Siguiente</a>
    {{/if}}

    <ul class="pagination-list">
      {{#each pagination.pageNumbers}}
      <li>
        <a class="pagination-link {{#if isCurrent}}is-current{{/if}}"
          href="/?page={{page}}&limit={{../limit}}&category={{../category}}&sort={{../sort}}&status={{../status}}">
          {{page}}
        </a>
      </li>
      {{/each}}
    </ul>
  </nav>
  <p class="has-text-centered pagination-link">
    P√°gina actual: {{pagination.page}} de {{pagination.totalPages}}
  </p>
  </div>
  </section>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
        const selectedCart = localStorage.getItem("selectedCart");
        const selectedCartText = document.getElementById("selectedCartText");

        if (selectedCart && selectedCartText) {
          selectedCartText.textContent = `Carrito seleccionado: ${selectedCart}`;
        }
    });

    document.addEventListener("DOMContentLoaded", function () {

      async function loadCarts() {
        try {

          const response = await fetch('/carts/all', {
            headers: { 'Accept': 'application/json' }
          });

          if (!response.ok) {
            alert('Error al cargar los carritos');
            return;
          }

          const data = await response.json();

          const cartList = document.getElementById("cartList");
          const createCartContainer = document.getElementById("createCartContainer");
          const selectedCartContainer = document.getElementById('selectedCartContainer');
          const selectedCartText = document.getElementById('selectedCartText');

          if (!cartList || !createCartContainer || !selectedCartContainer || !selectedCartText) {
            console.error("üî¥ Elementos del DOM no encontrados.");
            return;
          }

          // Limpiar elementos antes de actualizar
          cartList.innerHTML = "";
          createCartContainer.innerHTML = "";
          selectedCartText.textContent = "No hay carrito seleccionado";

          // Obtener el carrito previamente seleccionado
          const selectedCart = localStorage.getItem('selectedCart');

          const carts = data.payload;

          if (carts.length > 0) {
            carts.forEach(cart => {
              // Agregar tarjetas de carritos al listado
              const div = document.createElement("div");
              div.classList.add("column", "is-4");
              div.innerHTML = `
                    <div class="card">
                        <div class="card-content">
                            <p class="title is-5">Carrito ID: ${cart._id}</p>
                            <button class="button is-link" onclick="selectCart('${cart._id}')">
                                Seleccionar Carrito
                            </button>
                        </div>
                    </div>
                `
              cartList.appendChild(div)
            })

            if (carts.length < 3) {
              createCartContainer.innerHTML = `
                    <button class="button is-warning" onclick="createNewCart()">Crear Nuevo Carrito</button>
                `
            }
          } else {
            createNewCart();
          }
        } catch (error) {
          alert("Error al cargar los carritos");
        }
      }

      async function selectCart(cid) {
        await localStorage.setItem('selectedCart', cid)
        alert("Carrito seleccionado: " + cid)
        const selectedCartContainer = document.getElementById('selectedCartContainer')
        const selectedCartText = document.getElementById('selectedCartText')

        if (selectedCartContainer && selectedCartText) {
          selectedCartText.textContent = `Carrito seleccionado: ${cid}`
        }
      }

      async function createNewCart() {

        try {
          const response = await fetch('/carts/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          });

          if (!response.ok) {
            alert(`‚ùå Error al crear el carrito: ${response.statusText}`)
            return
          }
          const data = await response.json()

          if (!data.payload || !data.payload._id) {
            return
          }

          localStorage.setItem('selectedCart', data.payload._id)
          alert("‚úÖ Nuevo carrito creado: " + data.payload._id)
          loadCarts(); // Recargar la lista de carritos

        } catch (error) {
          alert("‚ùå Error al conectar con el servidor.")
        }
      }

      window.loadCarts = loadCarts
      window.selectCart = selectCart
      window.createNewCart = createNewCart
    })
  </script>
</body>

</html>